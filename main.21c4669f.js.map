{"version":3,"sources":["../node_modules/regenerator-runtime/runtime.js","scripts/main.js"],"names":["score","document","querySelector","scoreValue","Cell","gridElement","x","y","cell","createElement","classList","add","append","innerHTML","tile","setXY","linkedTile","linkedTileForMerge","newTile","isEmpty","hasTileForMerge","value","setValue","removeFromDOM","unlinkTileForMerge","GRID_SIZE","Grid","cells","i","push","Math","floor","cellsGroupedByColumn","groupCellsByColumn","cellsGroupedByRow","groupCellsByRow","cellsGroupedByReversedColumn","groupByReversedColumn","cellsGroupedByReversedRow","groupByReversedRow","map","column","reverse","row","emptyCells","filter","random","length","reduce","groupedCells","DARK_TEXT_LIGHTNESS","LIGHT_TEXT_LIGHTNESS","TEXT_LIGHTNESS_DIVIDER","Tile","tileElement","style","setProperty","textContent","bgLightness","log2","remove","Promise","resolve","addEventListener","once","window","CSS","registerProperty","name","syntax","inherits","initialValue","button","message","querySelectorAll","gameField","getElementById","grid","setupInputOnce","handleInput","moveEvent","key","canMoveUp","moveUp","canMoveDown","moveDown","canMoveLeft","moveLeft","canMoveRight","moveRight","getRandomEmptyCell","linkTile","waitForAnimationEnd","showMessage","slideTiles","promises","forEach","group","slideTilesInGroup","all","mergeTiles","j","cellWithTile","targetCell","canAccept","waitForTransitionEnd","linkTileForMerge","unlinkTile","canMove","some","canMoveGroup","index","hideMessage","className","mes","contains","restartScore"],"mappings":"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","file":"main.21c4669f.js","sourceRoot":"..\\src","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; };\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) });\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: true });\n  defineProperty(\n    GeneratorFunctionPrototype,\n    \"constructor\",\n    { value: GeneratorFunction, configurable: true }\n  );\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    defineProperty(this, \"_invoke\", { value: enqueue });\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method;\n    var method = delegate.iterator[methodName];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method, or a missing .next mehtod, always terminate the\n      // yield* loop.\n      context.delegate = null;\n\n      // Note: [\"return\"] must be used for ES3 parsing compatibility.\n      if (methodName === \"throw\" && delegate.iterator[\"return\"]) {\n        // If the delegate iterator has a return method, give it a\n        // chance to clean up.\n        context.method = \"return\";\n        context.arg = undefined;\n        maybeInvokeDelegate(delegate, context);\n\n        if (context.method === \"throw\") {\n          // If maybeInvokeDelegate(context) changed context.method from\n          // \"return\" to \"throw\", let that override the TypeError below.\n          return ContinueSentinel;\n        }\n      }\n      if (methodName !== \"return\") {\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a '\" + methodName + \"' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(val) {\n    var object = Object(val);\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable || iterable === \"\") {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    throw new TypeError(typeof iterable + \" is not iterable\");\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import 'regenerator-runtime/runtime';\n\nconst score = document.querySelector('.game_score');\nlet scoreValue = 0;\n\nclass Cell {\n  constructor(gridElement, x, y) {\n    const cell = document.createElement('div');\n\n    cell.classList.add('field_cell');\n    gridElement.append(cell);\n    this.x = x;\n    this.y = y;\n  }\n\n  restartScore() {\n    scoreValue = 0;\n    score.innerHTML = scoreValue;\n  }\n\n  linkTile(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTile = tile;\n  }\n\n  unlinkTile() {\n    this.linkedTile = null;\n  }\n\n  isEmpty() {\n    return !this.linkedTile;\n  }\n\n  linkTileForMerge(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTileForMerge = tile;\n  }\n\n  unlinkTileForMerge() {\n    this.linkedTileForMerge = null;\n  }\n\n  hasTileForMerge() {\n    return !!this.linkedTileForMerge;\n  }\n\n  canAccept(newTile) {\n    return this.isEmpty()\n    || (!this.hasTileForMerge() && this.linkedTile.value === newTile.value);\n  }\n\n  mergeTiles() {\n    this.linkedTile.setValue(this.linkedTile.value * 2);\n    scoreValue += this.linkedTile.value;\n    score.innerHTML = scoreValue;\n    this.linkedTileForMerge.removeFromDOM();\n    this.unlinkTileForMerge();\n  }\n}\n\nconst GRID_SIZE = 4;\n\nclass Grid {\n  constructor(gridElement) {\n    this.cells = [];\n\n    for (let i = 0; i < GRID_SIZE * GRID_SIZE; i++) {\n      this.cells.push(\n        new Cell(gridElement, i % GRID_SIZE, Math.floor(i / GRID_SIZE))\n      );\n    }\n\n    this.cellsGroupedByColumn = this.groupCellsByColumn();\n    this.cellsGroupedByRow = this.groupCellsByRow();\n    this.cellsGroupedByReversedColumn = this.groupByReversedColumn();\n    this.cellsGroupedByReversedRow = this.groupByReversedRow();\n  }\n\n  groupByReversedColumn() {\n    return this.cellsGroupedByColumn.map(\n      (column) => {\n        return [...column].reverse();\n      }\n    );\n  }\n\n  groupByReversedRow() {\n    return this.cellsGroupedByRow.map(\n      (row) => {\n        return [...row].reverse();\n      }\n    );\n  }\n\n  getRandomEmptyCell() {\n    const emptyCells = this.cells.filter(cell => cell.isEmpty());\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIndex];\n  }\n\n  groupCellsByColumn() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.x] = groupedCells[cell.x] || [];\n      groupedCells[cell.x][cell.y] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n\n  groupCellsByRow() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.y] = groupedCells[cell.y] || [];\n      groupedCells[cell.y][cell.x] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n}\n\nconst DARK_TEXT_LIGHTNESS = 80;\nconst LIGHT_TEXT_LIGHTNESS = 20;\nconst TEXT_LIGHTNESS_DIVIDER = 50;\n\nclass Tile {\n  constructor(gridElement) {\n    this.tileElement = document.createElement('div');\n    this.tileElement.classList.add('field_tile');\n    this.setValue(Math.random() > 0.1 ? 2 : 4);\n\n    gridElement.append(this.tileElement);\n  }\n\n  setXY(x, y) {\n    this.x = x;\n    this.y = y;\n    this.tileElement.style.setProperty('--x', x);\n    this.tileElement.style.setProperty('--y', y);\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.tileElement.textContent = this.value;\n\n    const bgLightness = 100 - Math.log2(value) * 7;\n\n    this.tileElement.style.setProperty('--bg-lightness', `${bgLightness}%`);\n\n    this.tileElement.style.setProperty(\n      '--text-lightness',\n      `${bgLightness < TEXT_LIGHTNESS_DIVIDER\n        ? DARK_TEXT_LIGHTNESS\n        : LIGHT_TEXT_LIGHTNESS}%`\n    );\n\n    if (this.value === 2048) {\n      const winMessage = document.querySelector('.message_win');\n\n      winMessage.classList.remove('hidden');\n    }\n  }\n\n  removeFromDOM() {\n    this.tileElement.remove();\n  }\n\n  waitForTransitionEnd() {\n    return new Promise(resolve => {\n      this.tileElement.addEventListener(\n        'transitionend', resolve, { once: true }\n      );\n    });\n  }\n\n  waitForAnimationEnd() {\n    return new Promise(resolve => {\n      this.tileElement.addEventListener(\n        'animationend', resolve, { once: true }\n      );\n    });\n  }\n}\n\nwindow.CSS.registerProperty({\n  name: '--border-angle',\n  syntax: '<angle>',\n  inherits: true,\n  initialValue: '0turn',\n});\n\nconst button = document.querySelector('.button');\nconst message = document.querySelectorAll('.message');\nconst gameField = document.getElementById('game_field');\n\nconst grid = new Grid(gameField);\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'RESTART';\n    hideMessage('message_start');\n  }\n\n  grid.cells.forEach(cell => {\n    if (!cell.isEmpty()) {\n      cell.linkedTile.removeFromDOM();\n      cell.unlinkTile();\n      cell.restartScore();\n    }\n  });\n\n  hideMessage('message_lose');\n  hideMessage('message_win');\n\n  grid.getRandomEmptyCell().linkTile(new Tile(gameField));\n  grid.getRandomEmptyCell().linkTile(new Tile(gameField));\n\n  setupInputOnce();\n});\n\nsetupInputOnce();\n\nfunction setupInputOnce() {\n  window.addEventListener('keydown', handleInput, { once: true });\n}\n\nasync function handleInput(moveEvent) {\n  switch (moveEvent.key) {\n    case 'ArrowUp':\n      if (!canMoveUp()) {\n        setupInputOnce();\n\n        return;\n      }\n      await moveUp();\n      break;\n\n    case 'ArrowDown':\n      if (!canMoveDown()) {\n        setupInputOnce();\n\n        return;\n      }\n      await moveDown();\n      break;\n\n    case 'ArrowLeft':\n      if (!canMoveLeft()) {\n        setupInputOnce();\n\n        return;\n      }\n      await moveLeft();\n      break;\n\n    case 'ArrowRight':\n      if (!canMoveRight()) {\n        setupInputOnce();\n\n        return;\n      }\n      await moveRight();\n      break;\n\n    default:\n      setupInputOnce();\n\n      return;\n  }\n\n  const newTile = new Tile(gameField);\n\n  grid.getRandomEmptyCell().linkTile(newTile);\n\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\n    await newTile.waitForAnimationEnd();\n    showMessage('message_lose');\n\n    return;\n  }\n\n  setupInputOnce();\n}\n\nasync function moveUp() {\n  await slideTiles(grid.cellsGroupedByColumn);\n}\n\nasync function moveDown() {\n  await slideTiles(grid.cellsGroupedByReversedColumn);\n}\n\nasync function moveLeft() {\n  await slideTiles(grid.cellsGroupedByRow);\n}\n\nasync function moveRight() {\n  await slideTiles(grid.cellsGroupedByReversedRow);\n}\n\nasync function slideTiles(groupedCells) {\n  const promises = [];\n\n  groupedCells.forEach(group => slideTilesInGroup(group, promises));\n\n  await Promise.all(promises);\n\n  grid.cells.forEach(cell => {\n    cell.hasTileForMerge() && cell.mergeTiles();\n  });\n}\n\nfunction slideTilesInGroup(group, promises) {\n  for (let i = 1; i < group.length; i++) {\n    if (group[i].isEmpty()) {\n      continue;\n    }\n\n    const cellWithTile = group[i];\n\n    let targetCell;\n    let j = i - 1;\n\n    while (j >= 0 && group[j].canAccept(cellWithTile.linkedTile)) {\n      targetCell = group[j];\n      j--;\n    }\n\n    if (!targetCell) {\n      continue;\n    }\n\n    promises.push(cellWithTile.linkedTile.waitForTransitionEnd());\n\n    targetCell.isEmpty()\n      ? targetCell.linkTile(cellWithTile.linkedTile)\n      : targetCell.linkTileForMerge(cellWithTile.linkedTile);\n\n    cellWithTile.unlinkTile();\n  }\n}\n\nfunction canMoveUp() {\n  return canMove(grid.cellsGroupedByColumn);\n}\n\nfunction canMoveDown() {\n  return canMove(grid.cellsGroupedByReversedColumn);\n}\n\nfunction canMoveLeft() {\n  return canMove(grid.cellsGroupedByRow);\n}\n\nfunction canMoveRight() {\n  return canMove(grid.cellsGroupedByReversedRow);\n}\n\nfunction canMove(groupedCells) {\n  return groupedCells.some(group => canMoveGroup(group));\n}\n\nfunction canMoveGroup(group) {\n  return group.some((cell, index) => {\n    if (index === 0) {\n      return false;\n    }\n\n    if (cell.isEmpty()) {\n      return false;\n    }\n\n    const targetCell = group[index - 1];\n\n    return targetCell.canAccept(cell.linkedTile);\n  });\n}\n\nfunction hideMessage(className) {\n  message.forEach((mes) => {\n    if (mes.classList.contains(className)) {\n      mes.classList.add('hidden');\n    }\n  });\n}\n\nfunction showMessage(className) {\n  message.forEach((mes) => {\n    if (mes.classList.contains(className)) {\n      mes.classList.remove('hidden');\n    }\n  });\n}\n"]}